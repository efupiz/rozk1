document.addEventListener("DOMContentLoaded", () => {
    // === 1. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞ –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è ===

    const notificationsView = document.getElementById('notifications-view');
    if (!notificationsView) {
        console.error("–°–µ–∫—Ü—ñ—è #notifications-view –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.");
        return;
    }

    const scheduleWrapper = notificationsView.querySelector('.schedule-wrapper');

    // –ï–ª–µ–º–µ–Ω—Ç–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è
    const toggleBellsBtn = document.getElementById('toggle-bells-btn');
    const toggleBellsIcon = toggleBellsBtn ? toggleBellsBtn.querySelector('.material-icons') : null;
    const toggleBellsText = toggleBellsBtn ? toggleBellsBtn.querySelector('span:last-child') : null;
    const currentBellDateEl = document.getElementById('current-bell-date');

    const statusContainerTemplate = notificationsView.querySelector('.status-container')?.cloneNode(true);
    const svgPatternTemplate = notificationsView.querySelector('.svg-pattern')?.cloneNode(true);
    
    notificationsView.querySelector('.status-container')?.remove();
    notificationsView.querySelector('.svg-pattern')?.remove();

    const exampleActiveCard = notificationsView.querySelector('.schedule-card.card-first');
    if (exampleActiveCard) {
        exampleActiveCard.classList.remove('card-first');
        exampleActiveCard.classList.add('card-second');
        exampleActiveCard.querySelector('.time-new')?.classList.remove('time-new');
    }

    // üí• –ó–ú–Ü–ù–ê –¢–£–¢: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Ä–æ–∑–∫–ª–∞–¥—É üí•
    const noBellsMessage = document.createElement('div');
    noBellsMessage.className = 'no-schedule-message no-clock-message';
    const noScheduleMainText = document.createElement('p');
    noScheduleMainText.className = 'no-schedule-main-text';
    noScheduleMainText.textContent = '–î–ª—è –æ–±—Ä–∞–Ω–æ–≥–æ –¥–Ω—è –Ω–µ–º–∞—î —Ä–æ–∑–∫–ª–∞–¥—É –¥–∑–≤—ñ–Ω–∫—ñ–≤.';
    noBellsMessage.appendChild(noScheduleMainText);
    // üí• –ö–Ü–ù–ï–¶–¨ –ó–ú–Ü–ù–ò üí•

    noBellsMessage.style.display = 'none'; 
    if (scheduleWrapper) {
        scheduleWrapper.appendChild(noBellsMessage);
    }

    // === 2. –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ===
    function parseTime(timeStr) {
        if (timeStr && timeStr.trim() === '‚Äì') { return null; }
        try {
            const [hours, minutes] = timeStr.split(':').map(Number);
            return hours * 60 + minutes;
        } catch (e) { return null; }
    }

    function getStatusLabel(period, currentTimeInMinutes) {
        const PStart = period.overallStart;
        const PEnd = period.overallEnd;
        if (currentTimeInMinutes >= PStart - 5 && currentTimeInMinutes < PStart) { return "–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞"; }
        if (currentTimeInMinutes >= PStart && currentTimeInMinutes < PStart + 10) { return "–ü–æ—á–∞—Ç–æ–∫"; }
        if (currentTimeInMinutes >= PEnd - 2 && currentTimeInMinutes < PEnd + 2) { return "–ó–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è"; }
        if (currentTimeInMinutes >= PEnd - 10 && currentTimeInMinutes < PEnd - 2) { return "–ó–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è"; }
        for (let i = 0; i < period.timePoints.length - 1; i++) {
            const currentPoint = period.timePoints[i];
            const nextPoint = period.timePoints[i + 1];
            if (currentPoint.type === 'end' && nextPoint.type === 'start') {
                if (currentTimeInMinutes >= currentPoint.time && currentTimeInMinutes < nextPoint.time) {
                    return "–ü–µ—Ä–µ—Ä–≤–∞";
                }
            }
        }
        return "–¢—Ä–∏–≤–∞—î";
    }

    // === 3. –ó–±—ñ—Ä –¥–∞–Ω–∏—Ö ===

    const allCards = notificationsView.querySelectorAll('.schedule-card');
    const cardPeriods = [];

    allCards.forEach(card => {
        const timeSpans = card.querySelectorAll('.time-start, .time-pouse-start, .time-pouse-end, .time-end');
        if (timeSpans.length === 0) return;
        const mainStartTimeEl = card.querySelector('.time-start');
        const mainStartTimeString = mainStartTimeEl ? mainStartTimeEl.textContent.trim() : null;
        const timePoints = [];
        timeSpans.forEach(span => {
            const time = parseTime(span.textContent);
            if (time !== null) {
                timePoints.push({
                    time: time,
                    element: span,
                    type: span.classList.contains('time-start') || span.classList.contains('time-pouse-end') ? 'start' : 'end' 
                });
            }
        });
        timePoints.sort((a, b) => a.time - b.time);
        if (timePoints.length > 0) {
            cardPeriods.push({
                card: card,
                mainStartTime: mainStartTimeString,
                overallStart: timePoints[0].time,
                overallEnd: timePoints[timePoints.length - 1].time,
                timePoints: timePoints 
            });
        }
    });

    // === 4. –§—É–Ω–∫—Ü—ñ—ó DOM ===
    function updatePills(card, statusText, countdownEndTime) {
        const statusContainer = card.querySelector('.status-container'); 
        const timePill = card.querySelector('.status-time-pill');
        const labelPill = card.querySelector('.status-label-pill');
        if (labelPill) labelPill.textContent = statusText;
        if (countdownEndTime !== null) {
            const now = new Date();
            const currentTimeInSeconds = now.getHours() * 3600 + now.getMinutes() * 60 + now.getSeconds();
            const countdownEndTimeInSeconds = countdownEndTime * 60;
            const remainingSecondsTotal = countdownEndTimeInSeconds - currentTimeInSeconds;
            if (remainingSecondsTotal > 0) {
                const minutes = Math.floor(remainingSecondsTotal / 60);
                const seconds = remainingSecondsTotal % 60;
                const minutesStr = String(minutes).padStart(2, '0');
                const secondsStr = String(seconds).padStart(2, '0');
                const newTimeHtml = `${minutesStr}<div class="animated-clok">:</div>${secondsStr}`;
                if (timePill && timePill.innerHTML !== newTimeHtml) { timePill.innerHTML = newTimeHtml; }
            } else {
                 if (timePill) timePill.innerHTML = `00<div class="animated-clok">:</div>00`;
            }
        } else {
             if (timePill) timePill.innerHTML = `---<div class="animated-clok">:</div>---`;
        }
        const statusWidths = { "–ü–µ—Ä–µ—Ä–≤–∞": "165px", "–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞": "185px", "–¢—Ä–∏–≤–∞—î": "150px", "–ü–æ—á–∞—Ç–æ–∫": "162px", "–ó–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è": "190px", "–ó–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è": "195px" };
        if (statusContainer && statusWidths[statusText]) { statusContainer.style.minWidth = statusWidths[statusText]; }
    }
    function activateCard(card, statusText, countdownEndTime) {
        if (!card) return;
        card.classList.remove('card-second'); card.classList.add('card-first');
        if (statusContainerTemplate && !card.querySelector('.status-container')) {
            const newStatusContainer = statusContainerTemplate.cloneNode(true); 
            const header = card.querySelector('.card-info-header');
            if (header) { header.appendChild(newStatusContainer); } 
            else { card.querySelector('.card-info')?.appendChild(newStatusContainer); }
        }
        if (svgPatternTemplate && !card.querySelector('.svg-pattern')) {
            const newSvgPattern = svgPatternTemplate.cloneNode(true);
            card.appendChild(newSvgPattern);
        }
        updatePills(card, statusText, countdownEndTime);
    }
    function deactivateCard(card) {
        if (!card) return;
        card.classList.remove('card-first'); card.classList.add('card-second');
        card.querySelectorAll('.time-new').forEach(el => el.classList.remove('time-new'));
        card.querySelector('.status-container')?.remove();
        card.querySelector('.svg-pattern')?.remove();
    }

    // === 5. –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É ===
    function updateScheduleStatus() {
        const now = new Date();
        const currentTimeInMinutes = now.getHours() * 60 + now.getMinutes();
        let targetCardPeriod = null;
        targetCardPeriod = cardPeriods.find(p => {
            if (p.card.style.display === 'none') return false; 
            const activeStart = p.overallStart - 5; 
            const activeEnd = p.overallEnd + 2; 
            return currentTimeInMinutes >= activeStart && currentTimeInMinutes < activeEnd;
        });
        if (!targetCardPeriod) {
            const completedPeriods = cardPeriods
                .filter(p => p.card.style.display !== 'none' && currentTimeInMinutes >= p.overallEnd)
                .sort((a, b) => b.overallEnd - a.overallEnd);
            if (completedPeriods.length > 0) {
                targetCardPeriod = completedPeriods[0];
                const indexOfLastCompleted = cardPeriods.indexOf(targetCardPeriod);
                const nextPeriod = cardPeriods[indexOfLastCompleted + 1];
                if (nextPeriod && nextPeriod.card.style.display !== 'none') {
                    const nextPreparationStart = nextPeriod.overallStart - 5; 
                    if (currentTimeInMinutes >= nextPreparationStart) {
                        targetCardPeriod = nextPeriod;
                    }
                }
            }
        }
        const currentlyActiveCard = notificationsView.querySelector('.schedule-card.card-first');
        if (targetCardPeriod) {
            const targetCard = targetCardPeriod.card;
            
            // üí• –§–Ü–ö–°: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Ü–µ –æ—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∞ –∫–∞—Ä—Ç–∫–∞ üí•
            const indexOfCurrent = cardPeriods.indexOf(targetCardPeriod);
            const nextPeriod = cardPeriods[indexOfCurrent + 1];
            // –í–≤–∞–∂–∞—î–º–æ –∫–∞—Ä—Ç–∫—É –æ—Å—Ç–∞–Ω–Ω—å–æ—é, —è–∫—â–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –ø–∞—Ä–∏ –Ω–µ–º–∞—î –∞–±–æ –≤–æ–Ω–∞ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∞
            const isLastPeriod = !nextPeriod || nextPeriod.card.style.display === 'none'; 
            
            // üí• –§–Ü–ö–° 1: –î–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∫–∞—Ä—Ç–∫–∏ —á–µ—Ä–µ–∑ 5 —Ö–≤–∏–ª–∏–Ω –ø—ñ—Å–ª—è —ó—ó –∫—ñ–Ω—Ü—è üí•
            if (isLastPeriod && currentTimeInMinutes >= targetCardPeriod.overallEnd + 5) {
                if (currentlyActiveCard) { deactivateCard(currentlyActiveCard); }
                return; 
            }

            let statusText = getStatusLabel(targetCardPeriod, currentTimeInMinutes);
            
            // üí• –§–Ü–ö–° 2: –ó–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—é —Å—Ç–∞—Ç—É—Å—É –¥–æ "–¢—Ä–∏–≤–∞—î" –¥–ª—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∫–∞—Ä—Ç–∫–∏ üí•
            if (isLastPeriod && currentTimeInMinutes >= targetCardPeriod.overallEnd + 2) {
                 // –Ø–∫—â–æ —á–∞—Å –º–∏–Ω—É–≤, —ñ —Ü–µ –æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç, —Ç—Ä–∏–º–∞—î–º–æ —Å—Ç–∞—Ç—É—Å "–ó–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è"
                 statusText = "–ó–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è"; 
            }

            // –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è "–ü–µ—Ä–µ—Ä–≤–∞" –º—ñ–∂ –ø–∞—Ä–∞–º–∏ (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ü–µ –Ω–µ –æ—Å—Ç–∞–Ω–Ω—è –ø–∞—Ä–∞)
            if (!isLastPeriod && currentTimeInMinutes >= targetCardPeriod.overallEnd + 2) {
                 // nextPeriod —ñ—Å–Ω—É—î —ñ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è
                 const nextPreparationStart = nextPeriod.overallStart - 5;
                 if (currentTimeInMinutes < nextPreparationStart) { statusText = "–ü–µ—Ä–µ—Ä–≤–∞"; }
            }
            
            let countdownEndTime = null;
            const PStart = targetCardPeriod.overallStart; const PEnd = targetCardPeriod.overallEnd; const timePoints = targetCardPeriod.timePoints;
            
            if (currentTimeInMinutes >= PStart - 5 && currentTimeInMinutes < PStart) {
                countdownEndTime = PStart;
            } else if (currentTimeInMinutes >= PEnd || statusText === "–ü–µ—Ä–µ—Ä–≤–∞") {
                
                // –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–µ—Ä–µ—Ä–≤–∞
                if (statusText === "–ü–µ—Ä–µ—Ä–≤–∞" && targetCard === currentlyActiveCard) {
                    for (let i = 0; i < timePoints.length - 1; i++) {
                        const currentPoint = timePoints[i]; const nextPoint = timePoints[i + 1];
                        if (currentPoint.type === 'end' && nextPoint.type === 'start') {
                            if (currentTimeInMinutes >= currentPoint.time && currentTimeInMinutes < nextPoint.time) {
                                countdownEndTime = nextPoint.time; break;
                            }
                        }
                    }
                }

                // –ü–µ—Ä–µ—Ä–≤–∞ –º—ñ–∂ –ø–∞—Ä–∞–º–∏ (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î –Ω–∞—Å—Ç—É–ø–Ω–∞ –ø–∞—Ä–∞)
                if (countdownEndTime === null && !isLastPeriod && nextPeriod.card.style.display !== 'none') {
                    countdownEndTime = nextPeriod.overallStart;
                }
                // –Ø–∫—â–æ isLastPeriod, countdownEndTime –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è null (–ø–æ–∫–∞–∑—É—î—Ç—å—Å—è ---:---)
                
            } else if (currentTimeInMinutes >= PStart && currentTimeInMinutes < PEnd) {
                let foundNextTime = null;
                for (const point of timePoints) { if (point.time > currentTimeInMinutes) { foundNextTime = point; break; } }
                if (foundNextTime) { countdownEndTime = foundNextTime.time; } else { countdownEndTime = PEnd; }
            }

            if (!currentlyActiveCard || currentlyActiveCard !== targetCard) {
                if (currentlyActiveCard) { deactivateCard(currentlyActiveCard); }
                activateCard(targetCard, statusText, countdownEndTime);
            } else if (currentlyActiveCard === targetCard) {
                updatePills(targetCard, statusText, countdownEndTime);
            }
            
            let targetElementToHighlight = null;
            if (statusText === "–ó–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è" || statusText === "–ü–µ—Ä–µ—Ä–≤–∞") { 
                targetCard.querySelectorAll('.time-new').forEach(el => el.classList.remove('time-new'));
            } else {
                if (statusText === "–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞" || statusText === "–ü–æ—á–∞—Ç–æ–∫") { targetElementToHighlight = targetCardPeriod.timePoints[0].element; } 
                else {
                    for (let i = targetCardPeriod.timePoints.length - 1; i >= 0; i--) {
                        const point = targetCardPeriod.timePoints[i];
                        if (currentTimeInMinutes >= point.time) { targetElementToHighlight = point.element; break; }
                    }
                }
                targetCard.querySelectorAll('.time-new').forEach(el => { if (el !== targetElementToHighlight) { el.classList.remove('time-new'); } });
                if (targetElementToHighlight && !targetElementToHighlight.classList.contains('time-new')) { targetElementToHighlight.classList.add('time-new'); }
            }
        } else {
            if (currentlyActiveCard) { deactivateCard(currentlyActiveCard); }
        }
    }

    // === 6. –ó–∞–ø—É—Å–∫: –∑–∞–±–µ–∑–ø–µ—á—É—î–º–æ —Ä–µ–∞–ª—å–Ω–∏–π —á–∞—Å ===

    updateScheduleStatus();
    setInterval(updateScheduleStatus, 1000); 

    // === 7. –õ–û–ì–Ü–ö–ê –§–Ü–õ–¨–¢–†–ê–¶–Ü–á –¢–ê –ö–ù–û–ü–ö–ò ===

    // --- –°—Ç–∞–Ω —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó ---
    let lastReceivedDayTimes = null; 
    let lastReceivedDate = null;
    let isFilteredMode = true;      

    /**
     * –í–Ω—É—Ç—Ä—ñ—à–Ω—è —Ñ—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É.
     */
    function applyBellFilter() {
        let visibleTimesSet;
        let visibleCount = 0;

        if (isFilteredMode && lastReceivedDayTimes) {
            // –†–ï–ñ–ò–ú –§–Ü–õ–¨–¢–†–ê–¶–Ü–á: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫ —á–∞—Å—É
            visibleTimesSet = new Set(lastReceivedDayTimes);
        } else {
            // –†–ï–ñ–ò–ú "–ü–û–ö–ê–ó–ê–¢–ò –í–°–Ü": –°—Ç–≤–æ—Ä—é—î–º–æ Set –∑ —É—Å—å–æ–≥–æ —á–∞—Å—É
            const allTimes = cardPeriods.map(p => p.mainStartTime);
            visibleTimesSet = new Set(allTimes);
        }

        // –ü—Ä–æ—Ö–æ–¥–∏–º–æ –ø–æ –≤—Å—ñ—Ö –∑—ñ–±—Ä–∞–Ω–∏—Ö –∫–∞—Ä—Ç–∫–∞—Ö
        cardPeriods.forEach(period => {
            if (visibleTimesSet.has(period.mainStartTime)) {
                period.card.style.display = ''; // –ü–æ–∫–∞–∑—É—î–º–æ
                visibleCount++;
            } else {
                period.card.style.display = 'none'; // –•–æ–≤–∞—î–º–æ
            }
        });

        // –ü–æ–∫–∞–∑—É—î–º–æ –∞–±–æ —Ö–æ–≤–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-–∑–∞–ø–æ–≤–Ω—é–≤–∞—á
        if (noBellsMessage) {
            if (visibleCount === 0 && isFilteredMode) {
                noBellsMessage.style.display = '';
            } else {
                noBellsMessage.style.display = 'none';
            }
        }

        const currentlyActiveCard = notificationsView.querySelector('.schedule-card.card-first');
        if (currentlyActiveCard && currentlyActiveCard.style.display === 'none') {
             deactivateCard(currentlyActiveCard);
        }

        updateScheduleStatus(); 
    }

    /**
     * –û—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ –≤—ñ–¥ script.js, –∑–±–µ—Ä—ñ–≥–∞—î —ó—Ö —ñ –≤–∏–∫–ª–∏–∫–∞—î applyBellFilter.
     * @param {string[]} visibleStartTimes - –ú–∞—Å–∏–≤ —Ä—è–¥–∫—ñ–≤ —á–∞—Å—É (–Ω–∞–ø—Ä. ["10:10", "12:00"]).
     * @param {string} dateString - –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —Ä—è–¥–æ–∫ –¥–∞—Ç–∏ (–Ω–∞–ø—Ä. "–í—Ç, 29 –∂–æ–≤—Ç").
     */
    function updateBellVisibility(visibleStartTimes, dateString) {
        // 1. –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫ —á–∞—Å—É —Ç–∞ –¥–∞—Ç—É
        lastReceivedDayTimes = visibleStartTimes;
        lastReceivedDate = dateString;
        
        // 2. –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–∞—Ç–∏
        if (currentBellDateEl && dateString) {
             currentBellDateEl.textContent = dateString;
        }

        // 3. –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä
        applyBellFilter();
    }

    // "–ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ" —Ñ—É–Ω–∫—Ü—ñ—é –≤ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç window
    window.updateBellScheduleVisibility = updateBellVisibility;

    // --- –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ ---
    if (toggleBellsBtn) {
        toggleBellsBtn.addEventListener('click', () => {
            // 1. –Ü–Ω–≤–µ—Ä—Ç—É—î–º–æ —Ä–µ–∂–∏–º
            isFilteredMode = !isFilteredMode;

            // 2. –û–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫—É
            if (isFilteredMode) {
                toggleBellsBtn.dataset.mode = 'filtered';
                if (toggleBellsIcon) toggleBellsIcon.textContent = 'visibility_off';
                if (toggleBellsText) toggleBellsText.textContent = '–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –¥–∑–≤—ñ–Ω–∫–∏';
            } else {
                toggleBellsBtn.dataset.mode = 'all';
                if (toggleBellsIcon) toggleBellsIcon.textContent = 'visibility';
                if (toggleBellsText) toggleBellsText.textContent = '–¢—ñ–ª—å–∫–∏ –∑–∞ —Ä–æ–∑–∫–ª–∞–¥–æ–º';
            }

            // 3. –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä
            applyBellFilter();
        });
    }

    // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ script.js, —â–æ –º–∏ –≥–æ—Ç–æ–≤—ñ –ø—Ä–∏–π–º–∞—Ç–∏ –¥–∞–Ω—ñ
    document.dispatchEvent(new CustomEvent('bellScheduleReady'));
});
